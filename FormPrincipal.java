//Rafael Munhoz Castro

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author rafin
 */
public class FormPrincipal extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(FormPrincipal.class.getName());

    private int opcao = 0, opcaoAirsoft = 0, canos = 0;
    private boolean altOUexc = false; //true excluir e false alterar
    private int airsCadExcAlt = 0; // 0 = cadastro, 1 = excluir, 2 =  alterar
    private int cadAltExcManu = 0; // 0 = cadastro, 1 = excluir, 2 =  alterar
    
    /**
     * Creates new form MenuBase
     */
    public FormPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Base = new javax.swing.JPanel();
        MenuPrinc = new javax.swing.JPanel();
        rtMenuPrincipal = new javax.swing.JLabel();
        btCadastrar = new javax.swing.JButton();
        cbSelecTipo = new javax.swing.JComboBox<>();
        btConsultar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btAlterar = new javax.swing.JButton();
        btAltStatus = new javax.swing.JButton();
        CadastroPes = new javax.swing.JPanel();
        btVoltar1 = new javax.swing.JButton();
        cxNome = new javax.swing.JTextField();
        cxCpf = new javax.swing.JTextField();
        rtCpf = new javax.swing.JLabel();
        rtNome = new javax.swing.JLabel();
        btEnviar1 = new javax.swing.JButton();
        CadastroOfi = new javax.swing.JPanel();
        rtRua = new javax.swing.JLabel();
        rtNumero = new javax.swing.JLabel();
        cxRua = new javax.swing.JTextField();
        cxNum = new javax.swing.JTextField();
        btVoltar3 = new javax.swing.JButton();
        cxCep = new javax.swing.JTextField();
        cxCodOfi = new javax.swing.JTextField();
        rtCep = new javax.swing.JLabel();
        rtCodOfi = new javax.swing.JLabel();
        btEnviar2 = new javax.swing.JButton();
        Consultas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbConsultas = new javax.swing.JTable();
        btVoltar2 = new javax.swing.JButton();
        rtRotulo = new javax.swing.JLabel();
        cxCaixaBusca = new javax.swing.JTextField();
        btConsultaUni = new javax.swing.JButton();
        cbSelecAirs1 = new javax.swing.JComboBox<>();
        AltExcPes = new javax.swing.JPanel();
        btVoltar4 = new javax.swing.JButton();
        rtCpf1 = new javax.swing.JLabel();
        cxCpf1 = new javax.swing.JTextField();
        btEnviar3 = new javax.swing.JButton();
        cxNome1 = new javax.swing.JTextField();
        rtNovoNome = new javax.swing.JLabel();
        AltExcOfi = new javax.swing.JPanel();
        rtCodig = new javax.swing.JLabel();
        rtNovoEnder = new javax.swing.JLabel();
        cxCodOfi1 = new javax.swing.JTextField();
        cxRua1 = new javax.swing.JTextField();
        btEnviar4 = new javax.swing.JButton();
        btVoltar5 = new javax.swing.JButton();
        rtRua1 = new javax.swing.JLabel();
        rtCep1 = new javax.swing.JLabel();
        rtNum1 = new javax.swing.JLabel();
        cxCep1 = new javax.swing.JTextField();
        cxNum1 = new javax.swing.JTextField();
        CadExcAltAirs = new javax.swing.JPanel();
        btVoltar6 = new javax.swing.JButton();
        cbSelecAirs = new javax.swing.JComboBox<>();
        btEnviar5 = new javax.swing.JButton();
        rtMecanismo = new javax.swing.JLabel();
        rtMarca = new javax.swing.JLabel();
        rtModelo = new javax.swing.JLabel();
        rtRegistro = new javax.swing.JLabel();
        cxModelo = new javax.swing.JTextField();
        cxMarca = new javax.swing.JTextField();
        cxMecanismo = new javax.swing.JTextField();
        cxRegistro = new javax.swing.JTextField();
        cbGrip = new javax.swing.JComboBox<>();
        rdBlowback = new javax.swing.JRadioButton();
        rtModoTiro = new javax.swing.JLabel();
        rtClasse = new javax.swing.JLabel();
        cbModoTiro = new javax.swing.JComboBox<>();
        cbClasse = new javax.swing.JComboBox<>();
        cbCanos = new javax.swing.JComboBox<>();
        cbEspalhamento = new javax.swing.JComboBox<>();
        rtCanos = new javax.swing.JLabel();
        rtEspalhamento = new javax.swing.JLabel();
        rtTipoGrip = new javax.swing.JLabel();
        btAltExcAirs = new javax.swing.JButton();
        CadAltExcManu = new javax.swing.JPanel();
        btVoltar7 = new javax.swing.JButton();
        rtCli = new javax.swing.JLabel();
        rtArm = new javax.swing.JLabel();
        rtOfi = new javax.swing.JLabel();
        rtAir = new javax.swing.JLabel();
        rtCpfCli = new javax.swing.JLabel();
        rtCpfArm = new javax.swing.JLabel();
        rtCodigoOfi = new javax.swing.JLabel();
        rtRegistroAir = new javax.swing.JLabel();
        cxCpfCli = new javax.swing.JTextField();
        cxCpfArm = new javax.swing.JTextField();
        cxCodigoOfi = new javax.swing.JTextField();
        cxRegistroAirs = new javax.swing.JTextField();
        rtCodManu = new javax.swing.JLabel();
        cxCodManu = new javax.swing.JTextField();
        btEnviar = new javax.swing.JButton();
        AltStatus = new javax.swing.JPanel();
        rtCodManutenc = new javax.swing.JLabel();
        cxCodManu1 = new javax.swing.JTextField();
        btVoltar8 = new javax.swing.JButton();
        cbNovoStatus = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbManutencs = new javax.swing.JTable();
        btAtualizar1 = new javax.swing.JButton();
        mnBarra = new javax.swing.JMenuBar();
        mnFecharAplicacao = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Base.setLayout(new java.awt.CardLayout());

        rtMenuPrincipal.setFont(new java.awt.Font("ROG Fonts", 0, 48)); // NOI18N
        rtMenuPrincipal.setText("Menu Principal");

        btCadastrar.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btCadastrar.setText("Cadastrar");
        btCadastrar.setEnabled(false);
        btCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCadastrarActionPerformed(evt);
            }
        });

        cbSelecTipo.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        cbSelecTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione uma opcao", "Cliente", "Armeiro", "Oficina", "Airsoft", "Manutencao" }));
        cbSelecTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSelecTipoActionPerformed(evt);
            }
        });

        btConsultar.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btConsultar.setText("Consultar");
        btConsultar.setEnabled(false);
        btConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarActionPerformed(evt);
            }
        });

        btExcluir.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btExcluir.setText("Excluir");
        btExcluir.setEnabled(false);
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btAlterar.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btAlterar.setText("Alterar");
        btAlterar.setEnabled(false);
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });

        btAltStatus.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btAltStatus.setText("Alterar status");
        btAltStatus.setEnabled(false);
        btAltStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAltStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MenuPrincLayout = new javax.swing.GroupLayout(MenuPrinc);
        MenuPrinc.setLayout(MenuPrincLayout);
        MenuPrincLayout.setHorizontalGroup(
            MenuPrincLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuPrincLayout.createSequentialGroup()
                .addGroup(MenuPrincLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MenuPrincLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(MenuPrincLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbSelecTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(MenuPrincLayout.createSequentialGroup()
                                .addGroup(MenuPrincLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btAlterar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btExcluir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btCadastrar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(166, 166, 166)
                                .addGroup(MenuPrincLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btConsultar)
                                    .addComponent(btAltStatus)))))
                    .addGroup(MenuPrincLayout.createSequentialGroup()
                        .addGap(256, 256, 256)
                        .addComponent(rtMenuPrincipal)))
                .addContainerGap(276, Short.MAX_VALUE))
        );
        MenuPrincLayout.setVerticalGroup(
            MenuPrincLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuPrincLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(rtMenuPrincipal)
                .addGap(97, 97, 97)
                .addComponent(cbSelecTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addGroup(MenuPrincLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btCadastrar)
                    .addComponent(btConsultar))
                .addGap(37, 37, 37)
                .addGroup(MenuPrincLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btExcluir)
                    .addComponent(btAltStatus))
                .addGap(37, 37, 37)
                .addComponent(btAlterar)
                .addContainerGap(185, Short.MAX_VALUE))
        );

        btAltStatus.getAccessibleContext().setAccessibleDescription("");

        Base.add(MenuPrinc, "MenuPrinc");

        btVoltar1.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btVoltar1.setText("Voltar");
        btVoltar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltar1ActionPerformed(evt);
            }
        });

        cxNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cxNomeActionPerformed(evt);
            }
        });

        cxCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cxCpfActionPerformed(evt);
            }
        });

        rtCpf.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtCpf.setText("Digite o CPF:");

        rtNome.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtNome.setText("Digite o Nome:");

        btEnviar1.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btEnviar1.setText("Enviar");
        btEnviar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CadastroPesLayout = new javax.swing.GroupLayout(CadastroPes);
        CadastroPes.setLayout(CadastroPesLayout);
        CadastroPesLayout.setHorizontalGroup(
            CadastroPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CadastroPesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btVoltar1)
                .addGap(22, 22, 22))
            .addGroup(CadastroPesLayout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addGroup(CadastroPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rtCpf)
                    .addComponent(rtNome))
                .addGap(112, 112, 112)
                .addGroup(CadastroPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cxNome)
                    .addComponent(cxCpf)
                    .addComponent(btEnviar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE))
                .addContainerGap(356, Short.MAX_VALUE))
        );
        CadastroPesLayout.setVerticalGroup(
            CadastroPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CadastroPesLayout.createSequentialGroup()
                .addGap(172, 172, 172)
                .addGroup(CadastroPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCpf)
                    .addComponent(cxCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(CadastroPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cxNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rtNome))
                .addGap(34, 34, 34)
                .addComponent(btEnviar1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 340, Short.MAX_VALUE)
                .addComponent(btVoltar1)
                .addGap(17, 17, 17))
        );

        Base.add(CadastroPes, "CadastroPes");

        rtRua.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtRua.setText("Digite a Rua:");

        rtNumero.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtNumero.setText("Digite o NUmero:");

        cxRua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cxRuaActionPerformed(evt);
            }
        });

        cxNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cxNumActionPerformed(evt);
            }
        });

        btVoltar3.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btVoltar3.setText("Voltar");
        btVoltar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltar3ActionPerformed(evt);
            }
        });

        rtCep.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtCep.setText("Digite o CEP:");

        rtCodOfi.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtCodOfi.setText("Digite o Codigo:");

        btEnviar2.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btEnviar2.setText("Enviar");
        btEnviar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviar2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CadastroOfiLayout = new javax.swing.GroupLayout(CadastroOfi);
        CadastroOfi.setLayout(CadastroOfiLayout);
        CadastroOfiLayout.setHorizontalGroup(
            CadastroOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CadastroOfiLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btVoltar3)
                .addGap(22, 22, 22))
            .addGroup(CadastroOfiLayout.createSequentialGroup()
                .addGap(287, 287, 287)
                .addGroup(CadastroOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rtCodOfi)
                    .addComponent(rtCep)
                    .addComponent(rtNumero)
                    .addComponent(rtRua))
                .addGap(42, 42, 42)
                .addGroup(CadastroOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cxCodOfi)
                    .addComponent(cxCep)
                    .addComponent(cxNum, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(cxRua, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(btEnviar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(277, Short.MAX_VALUE))
        );
        CadastroOfiLayout.setVerticalGroup(
            CadastroOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CadastroOfiLayout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addGroup(CadastroOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtRua)
                    .addComponent(cxRua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(CadastroOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtNumero)
                    .addComponent(cxNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(CadastroOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCep)
                    .addComponent(cxCep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(CadastroOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCodOfi)
                    .addComponent(cxCodOfi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(btEnviar2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 228, Short.MAX_VALUE)
                .addComponent(btVoltar3)
                .addGap(17, 17, 17))
        );

        Base.add(CadastroOfi, "CadastroOfi");

        tbConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbConsultas);

        btVoltar2.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btVoltar2.setText("Voltar");
        btVoltar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltar2ActionPerformed(evt);
            }
        });

        rtRotulo.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtRotulo.setText("Insira");

        cxCaixaBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cxCaixaBuscaActionPerformed(evt);
            }
        });

        btConsultaUni.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btConsultaUni.setText("Consultar");
        btConsultaUni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultaUniActionPerformed(evt);
            }
        });

        cbSelecAirs1.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        cbSelecAirs1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione um tipo de airsoft", "Shotgun", "Rifle", "Pistola" }));
        cbSelecAirs1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSelecAirs1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ConsultasLayout = new javax.swing.GroupLayout(Consultas);
        Consultas.setLayout(ConsultasLayout);
        ConsultasLayout.setHorizontalGroup(
            ConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConsultasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(ConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConsultasLayout.createSequentialGroup()
                        .addGroup(ConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btConsultaUni, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cxCaixaBusca)
                            .addComponent(rtRotulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(200, 200, 200))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConsultasLayout.createSequentialGroup()
                        .addComponent(cbSelecAirs1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConsultasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btVoltar2)
                .addContainerGap())
        );
        ConsultasLayout.setVerticalGroup(
            ConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConsultasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConsultasLayout.createSequentialGroup()
                        .addComponent(cbSelecAirs1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113)
                        .addComponent(rtRotulo)
                        .addGap(18, 18, 18)
                        .addComponent(cxCaixaBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btConsultaUni))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 169, Short.MAX_VALUE)
                .addComponent(btVoltar2)
                .addContainerGap())
        );

        Base.add(Consultas, "Consultas");

        btVoltar4.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btVoltar4.setText("Voltar");
        btVoltar4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltar4ActionPerformed(evt);
            }
        });

        rtCpf1.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtCpf1.setText("Digite o CPF:");

        btEnviar3.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btEnviar3.setText("Enviar");
        btEnviar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviar3ActionPerformed(evt);
            }
        });

        rtNovoNome.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtNovoNome.setText("Digite o novo Nome:");

        javax.swing.GroupLayout AltExcPesLayout = new javax.swing.GroupLayout(AltExcPes);
        AltExcPes.setLayout(AltExcPesLayout);
        AltExcPesLayout.setHorizontalGroup(
            AltExcPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AltExcPesLayout.createSequentialGroup()
                .addGroup(AltExcPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AltExcPesLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btVoltar4))
                    .addGroup(AltExcPesLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(AltExcPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rtCpf1)
                            .addComponent(rtNovoNome))
                        .addGap(18, 18, 18)
                        .addGroup(AltExcPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btEnviar3)
                            .addGroup(AltExcPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cxCpf1, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                .addComponent(cxNome1)))
                        .addGap(0, 495, Short.MAX_VALUE)))
                .addContainerGap())
        );
        AltExcPesLayout.setVerticalGroup(
            AltExcPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AltExcPesLayout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addGroup(AltExcPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCpf1)
                    .addComponent(cxCpf1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(AltExcPesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AltExcPesLayout.createSequentialGroup()
                        .addComponent(cxNome1)
                        .addGap(2, 2, 2))
                    .addComponent(rtNovoNome))
                .addGap(40, 40, 40)
                .addComponent(btEnviar3)
                .addGap(376, 376, 376)
                .addComponent(btVoltar4)
                .addContainerGap())
        );

        Base.add(AltExcPes, "AltExcPes");

        rtCodig.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtCodig.setText("Digite o Codigo:");

        rtNovoEnder.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtNovoEnder.setText("Digite o novo Endereco:");

        btEnviar4.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btEnviar4.setText("Enviar");
        btEnviar4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviar4ActionPerformed(evt);
            }
        });

        btVoltar5.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btVoltar5.setText("Voltar");
        btVoltar5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltar5ActionPerformed(evt);
            }
        });

        rtRua1.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtRua1.setText("Rua:");

        rtCep1.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtCep1.setText("CEP:");

        rtNum1.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtNum1.setText("Numero:");

        javax.swing.GroupLayout AltExcOfiLayout = new javax.swing.GroupLayout(AltExcOfi);
        AltExcOfi.setLayout(AltExcOfiLayout);
        AltExcOfiLayout.setHorizontalGroup(
            AltExcOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AltExcOfiLayout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addGroup(AltExcOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AltExcOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(rtCodig)
                        .addComponent(rtNovoEnder))
                    .addGroup(AltExcOfiLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(AltExcOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rtCep1)
                            .addComponent(rtNum1)
                            .addComponent(rtRua1))
                        .addGap(18, 18, 18)
                        .addGroup(AltExcOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cxRua1)
                            .addComponent(cxCep1)
                            .addComponent(cxNum1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(AltExcOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btEnviar4)
                    .addComponent(cxCodOfi1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(361, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AltExcOfiLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btVoltar5)
                .addContainerGap())
        );
        AltExcOfiLayout.setVerticalGroup(
            AltExcOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AltExcOfiLayout.createSequentialGroup()
                .addGap(208, 208, 208)
                .addGroup(AltExcOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCodig)
                    .addComponent(cxCodOfi1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(rtNovoEnder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AltExcOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCep1)
                    .addComponent(cxCep1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(AltExcOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cxRua1)
                    .addComponent(rtRua1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AltExcOfiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtNum1)
                    .addComponent(cxNum1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btEnviar4))
                .addGap(246, 246, 246)
                .addComponent(btVoltar5)
                .addContainerGap())
        );

        Base.add(AltExcOfi, "AltExcOfi");

        btVoltar6.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btVoltar6.setText("Voltar");
        btVoltar6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltar6ActionPerformed(evt);
            }
        });

        cbSelecAirs.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        cbSelecAirs.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione um tipo de airsoft", "Shotgun", "Rifle", "Pistola" }));
        cbSelecAirs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSelecAirsActionPerformed(evt);
            }
        });

        btEnviar5.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btEnviar5.setText("Enviar");
        btEnviar5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviar5ActionPerformed(evt);
            }
        });

        rtMecanismo.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtMecanismo.setText("Mecanismo:");

        rtMarca.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtMarca.setText("Marca:");

        rtModelo.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtModelo.setText("Modelo:");

        rtRegistro.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtRegistro.setText("Registro:");

        cbGrip.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        cbGrip.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Padrao", "Borracha", "Texturizado", "Modular/Intercambiavel", "Tatico", "Customizado", "Outro" }));
        cbGrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbGripActionPerformed(evt);
            }
        });

        rdBlowback.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rdBlowback.setText("BlowBack");
        rdBlowback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdBlowbackActionPerformed(evt);
            }
        });

        rtModoTiro.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtModoTiro.setText("Modo de tiro:");

        rtClasse.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtClasse.setText("Classe:");

        cbModoTiro.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        cbModoTiro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Semi", "Auto" }));
        cbModoTiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbModoTiroActionPerformed(evt);
            }
        });

        cbClasse.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        cbClasse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Assault", "DMR", "Sniper", "PDW", "LMG" }));
        cbClasse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbClasseActionPerformed(evt);
            }
        });

        cbCanos.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        cbCanos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "1", "2", "3" }));
        cbCanos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCanosActionPerformed(evt);
            }
        });

        cbEspalhamento.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        cbEspalhamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Baixo", "Medio", "Alto" }));
        cbEspalhamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEspalhamentoActionPerformed(evt);
            }
        });

        rtCanos.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtCanos.setText("Canos:");

        rtEspalhamento.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtEspalhamento.setText("Espalhamento:");

        rtTipoGrip.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtTipoGrip.setText("tipo de Grip:");

        btAltExcAirs.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btAltExcAirs.setText("ExcAlt");
        btAltExcAirs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAltExcAirsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CadExcAltAirsLayout = new javax.swing.GroupLayout(CadExcAltAirs);
        CadExcAltAirs.setLayout(CadExcAltAirsLayout);
        CadExcAltAirsLayout.setHorizontalGroup(
            CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CadExcAltAirsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CadExcAltAirsLayout.createSequentialGroup()
                        .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rtMecanismo)
                            .addComponent(rtMarca)
                            .addComponent(rtModelo)
                            .addComponent(rtRegistro))
                        .addGap(18, 18, 18)
                        .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CadExcAltAirsLayout.createSequentialGroup()
                                .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cxMecanismo, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(cxMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cxModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(207, 207, 207)
                                .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rtModoTiro)
                                    .addComponent(rtClasse))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbModoTiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbClasse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(CadExcAltAirsLayout.createSequentialGroup()
                                .addComponent(cxRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(112, 112, 112)
                                .addComponent(btAltExcAirs)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(CadExcAltAirsLayout.createSequentialGroup()
                        .addComponent(rtTipoGrip)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbGrip, 0, 1, Short.MAX_VALUE)
                            .addGroup(CadExcAltAirsLayout.createSequentialGroup()
                                .addComponent(rdBlowback, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 77, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rtEspalhamento)
                            .addComponent(rtCanos))
                        .addGap(18, 18, 18)
                        .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbEspalhamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbCanos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))))
            .addGroup(CadExcAltAirsLayout.createSequentialGroup()
                .addComponent(cbSelecAirs, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CadExcAltAirsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btVoltar6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btEnviar5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        CadExcAltAirsLayout.setVerticalGroup(
            CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CadExcAltAirsLayout.createSequentialGroup()
                .addComponent(cbSelecAirs, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94)
                .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CadExcAltAirsLayout.createSequentialGroup()
                        .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cxModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rtModelo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rtMarca)
                            .addComponent(cxMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cxMecanismo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rtMecanismo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rtRegistro)
                            .addComponent(cxRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btAltExcAirs)))
                    .addGroup(CadExcAltAirsLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rtModoTiro)
                            .addComponent(cbModoTiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rtClasse)
                            .addComponent(cbClasse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCanos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rtCanos)
                    .addComponent(cbGrip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rtTipoGrip))
                .addGap(18, 18, 18)
                .addGroup(CadExcAltAirsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbEspalhamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rtEspalhamento)
                    .addComponent(rdBlowback))
                .addGap(115, 115, 115)
                .addComponent(btEnviar5)
                .addGap(32, 32, 32)
                .addComponent(btVoltar6)
                .addContainerGap())
        );

        Base.add(CadExcAltAirs, "CadExcAltAirs");

        btVoltar7.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btVoltar7.setText("Voltar");
        btVoltar7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltar7ActionPerformed(evt);
            }
        });

        rtCli.setFont(new java.awt.Font("ROG Fonts", 0, 36)); // NOI18N
        rtCli.setText("Cliente");

        rtArm.setFont(new java.awt.Font("ROG Fonts", 0, 36)); // NOI18N
        rtArm.setText("Armeiro");

        rtOfi.setFont(new java.awt.Font("ROG Fonts", 0, 36)); // NOI18N
        rtOfi.setText("Oficina");

        rtAir.setFont(new java.awt.Font("ROG Fonts", 0, 36)); // NOI18N
        rtAir.setText("Airsoft");

        rtCpfCli.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtCpfCli.setText("CPF:");

        rtCpfArm.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtCpfArm.setText("CPF:");

        rtCodigoOfi.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtCodigoOfi.setText("Codigo:");

        rtRegistroAir.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtRegistroAir.setText("Registro:");

        rtCodManu.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtCodManu.setText("Codigo da Manutencao:");

        btEnviar.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btEnviar.setText("Enviar");
        btEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CadAltExcManuLayout = new javax.swing.GroupLayout(CadAltExcManu);
        CadAltExcManu.setLayout(CadAltExcManuLayout);
        CadAltExcManuLayout.setHorizontalGroup(
            CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CadAltExcManuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btVoltar7)
                .addContainerGap())
            .addGroup(CadAltExcManuLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CadAltExcManuLayout.createSequentialGroup()
                        .addComponent(rtCodManu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cxCodManu, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btEnviar)
                        .addContainerGap(243, Short.MAX_VALUE))
                    .addGroup(CadAltExcManuLayout.createSequentialGroup()
                        .addGroup(CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CadAltExcManuLayout.createSequentialGroup()
                                .addComponent(rtCpfCli)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(rtCli, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cxCpfCli, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(CadAltExcManuLayout.createSequentialGroup()
                                .addComponent(rtCodigoOfi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cxCodigoOfi, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(CadAltExcManuLayout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addComponent(rtOfi)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(CadAltExcManuLayout.createSequentialGroup()
                                    .addComponent(rtCpfArm)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(rtArm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cxCpfArm, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(CadAltExcManuLayout.createSequentialGroup()
                                    .addComponent(rtRegistroAir)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cxRegistroAirs, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(rtAir, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(81, 81, 81))))
        );
        CadAltExcManuLayout.setVerticalGroup(
            CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CadAltExcManuLayout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addGroup(CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCli)
                    .addComponent(rtArm))
                .addGap(20, 20, 20)
                .addGroup(CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCpfCli)
                    .addComponent(rtCpfArm)
                    .addComponent(cxCpfCli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cxCpfArm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(91, 91, 91)
                .addGroup(CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CadAltExcManuLayout.createSequentialGroup()
                        .addComponent(rtAir)
                        .addGap(20, 20, 20)
                        .addGroup(CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rtRegistroAir)
                            .addComponent(cxRegistroAirs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(CadAltExcManuLayout.createSequentialGroup()
                        .addComponent(rtOfi)
                        .addGap(18, 18, 18)
                        .addGroup(CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rtCodigoOfi)
                            .addComponent(cxCodigoOfi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                .addGroup(CadAltExcManuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCodManu)
                    .addComponent(cxCodManu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btEnviar))
                .addGap(110, 110, 110)
                .addComponent(btVoltar7)
                .addContainerGap())
        );

        Base.add(CadAltExcManu, "CadAltExcManu");

        rtCodManutenc.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        rtCodManutenc.setText("Codigo da Manutencao:");

        cxCodManu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cxCodManu1ActionPerformed(evt);
            }
        });

        btVoltar8.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btVoltar8.setText("Voltar");
        btVoltar8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltar8ActionPerformed(evt);
            }
        });

        cbNovoStatus.setFont(new java.awt.Font("ROG Fonts", 0, 18)); // NOI18N
        cbNovoStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione o novo status", "Pendente", "Em progresso", "Finalizado" }));
        cbNovoStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNovoStatusActionPerformed(evt);
            }
        });

        tbManutencs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tbManutencs);

        btAtualizar1.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        btAtualizar1.setText("Atualizar");
        btAtualizar1.setEnabled(false);
        btAtualizar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualizar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AltStatusLayout = new javax.swing.GroupLayout(AltStatus);
        AltStatus.setLayout(AltStatusLayout);
        AltStatusLayout.setHorizontalGroup(
            AltStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AltStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(AltStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AltStatusLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btVoltar8)
                        .addContainerGap())
                    .addGroup(AltStatusLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(AltStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AltStatusLayout.createSequentialGroup()
                                .addComponent(rtCodManutenc)
                                .addGap(140, 148, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AltStatusLayout.createSequentialGroup()
                                .addComponent(cxCodManu1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(AltStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btAtualizar1)
                                    .addComponent(cbNovoStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())))))
        );
        AltStatusLayout.setVerticalGroup(
            AltStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AltStatusLayout.createSequentialGroup()
                .addGroup(AltStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AltStatusLayout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(rtCodManutenc)
                        .addGap(18, 18, 18)
                        .addGroup(AltStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cxCodManu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbNovoStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63)
                        .addComponent(btAtualizar1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btVoltar8))
                    .addGroup(AltStatusLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE)))
                .addContainerGap())
        );

        Base.add(AltStatus, "AltStatus");

        mnBarra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mnBarraMouseClicked(evt);
            }
        });

        mnFecharAplicacao.setText("Fechar Aplicacao");
        mnFecharAplicacao.setFont(new java.awt.Font("ROG Fonts", 0, 24)); // NOI18N
        mnBarra.add(mnFecharAplicacao);

        setJMenuBar(mnBarra);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Base, javax.swing.GroupLayout.PREFERRED_SIZE, 1033, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Base, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btVoltar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltar1ActionPerformed
        CardLayout tela = (CardLayout) Base.getLayout();
        tela.show(Base, "MenuPrinc");
    }//GEN-LAST:event_btVoltar1ActionPerformed

    private void cbSelecTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSelecTipoActionPerformed
        String objeto = cbSelecTipo.getSelectedItem().toString();
        switch(objeto){
            case "Cliente" -> opcao = 1;
            case "Armeiro" -> opcao = 2;
            case "Oficina" -> opcao = 3;
            case "Airsoft" -> opcao = 4;
            case "Manutencao" -> opcao = 5;
            default -> opcao = 0;
        }
        if(opcao == 5){
            btAltStatus.setEnabled(true);
        }else{
            btAltStatus.setEnabled(false);
        }
        habilitaBotoes();
    }//GEN-LAST:event_cbSelecTipoActionPerformed

    private void btCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCadastrarActionPerformed
        switch(opcao){
            case 1 -> {
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "CadastroPes");
            }
            case 2 -> {
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "CadastroPes");
            }
            case 3 -> {
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "CadastroOfi");
            }
            case 4 -> {
                airsCadExcAlt = 0;
                mostraAirsoft();
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "CadExcAltAirs");
            }
            case 5 ->{
                cadAltExcManu = 0;
                mostraCadAltExcManuItens();
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "CadAltExcManu");
            }
        }
    }//GEN-LAST:event_btCadastrarActionPerformed

    private void cxCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cxCpfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cxCpfActionPerformed

    private void cxNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cxNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cxNomeActionPerformed

    private void cxRuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cxRuaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cxRuaActionPerformed

    private void cxNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cxNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cxNumActionPerformed

    private void btVoltar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltar3ActionPerformed
        CardLayout tela = (CardLayout) Base.getLayout();
        tela.show(Base, "MenuPrinc");
    }//GEN-LAST:event_btVoltar3ActionPerformed

    private void btEnviar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnviar1ActionPerformed
        cadastro();
    }//GEN-LAST:event_btEnviar1ActionPerformed

    private void btEnviar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnviar2ActionPerformed
        cadastro();
    }//GEN-LAST:event_btEnviar2ActionPerformed

    private void btConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultarActionPerformed
        listTab();
        showHIDEbotao();
        CardLayout tela = (CardLayout) Base.getLayout();
        tela.show(Base, "Consultas");
    }//GEN-LAST:event_btConsultarActionPerformed

    private void btVoltar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltar2ActionPerformed
        cbSelecAirs1.setSelectedIndex(0);
        CardLayout tela = (CardLayout) Base.getLayout();
        tela.show(Base, "MenuPrinc");
    }//GEN-LAST:event_btVoltar2ActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        excluirSelec();
    }//GEN-LAST:event_btExcluirActionPerformed

    private void btVoltar4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltar4ActionPerformed
        CardLayout tela = (CardLayout) Base.getLayout();
        tela.show(Base, "MenuPrinc");
    }//GEN-LAST:event_btVoltar4ActionPerformed

    private void btEnviar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnviar3ActionPerformed
        if(altOUexc){
            excluiPes();
        }else{
            alteraPes();
        }
    }//GEN-LAST:event_btEnviar3ActionPerformed

    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
        alteraSelec();
    }//GEN-LAST:event_btAlterarActionPerformed

    private void btEnviar4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnviar4ActionPerformed
        if(altOUexc){
            excluiOfi();
        }else{
            alteraOfi();
        }
    }//GEN-LAST:event_btEnviar4ActionPerformed

    private void btVoltar5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltar5ActionPerformed
        CardLayout tela = (CardLayout) Base.getLayout();
        tela.show(Base, "MenuPrinc");
    }//GEN-LAST:event_btVoltar5ActionPerformed

    private void btConsultaUniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultaUniActionPerformed
        consultaUnitaria();
    }//GEN-LAST:event_btConsultaUniActionPerformed

    private void btVoltar6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltar6ActionPerformed
        cbSelecAirs.setSelectedIndex(0);
        CardLayout tela = (CardLayout) Base.getLayout();
        tela.show(Base, "MenuPrinc");
    }//GEN-LAST:event_btVoltar6ActionPerformed

    private void cbSelecAirsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSelecAirsActionPerformed
        String objeto = cbSelecAirs.getSelectedItem().toString();
        switch(objeto){
            case "Shotgun" -> opcaoAirsoft = 1;
            case "Rifle" -> opcaoAirsoft = 2;
            case "Pistola" -> opcaoAirsoft = 3;
            default -> opcaoAirsoft = 0;
        }
        mostraAirsoft();
    }//GEN-LAST:event_cbSelecAirsActionPerformed

    private void cbModoTiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbModoTiroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbModoTiroActionPerformed

    private void cbGripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbGripActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbGripActionPerformed

    private void rdBlowbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdBlowbackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdBlowbackActionPerformed

    private void btEnviar5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnviar5ActionPerformed
        cadastro();
    }//GEN-LAST:event_btEnviar5ActionPerformed

    private void cbCanosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCanosActionPerformed
        String objeto = cbCanos.getSelectedItem().toString();
        switch(objeto){
            case "1" -> canos = 1;
            case "2" -> canos = 2;
            case "3" -> canos = 3;
            default -> canos = 0;
        }
    }//GEN-LAST:event_cbCanosActionPerformed

    private void cbClasseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbClasseActionPerformed

    }//GEN-LAST:event_cbClasseActionPerformed

    private void cbEspalhamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEspalhamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEspalhamentoActionPerformed

    private void btAltExcAirsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAltExcAirsActionPerformed
        confereRegAirs_Alt_Exc();
    }//GEN-LAST:event_btAltExcAirsActionPerformed

    private void cbSelecAirs1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSelecAirs1ActionPerformed
        String objeto = cbSelecAirs1.getSelectedItem().toString();
        switch(objeto){
            case "Shotgun" -> opcaoAirsoft = 1;
            case "Rifle" -> opcaoAirsoft = 2;
            case "Pistola" -> opcaoAirsoft = 3;
            default -> opcaoAirsoft = 0;
        }
        showHIDEbotao();
        listTab();
    }//GEN-LAST:event_cbSelecAirs1ActionPerformed

    private void btVoltar7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltar7ActionPerformed
        CardLayout tela = (CardLayout) Base.getLayout();
        tela.show(Base, "MenuPrinc");
    }//GEN-LAST:event_btVoltar7ActionPerformed

    private void btEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnviarActionPerformed
        switch(cadAltExcManu){
            case 0 ->{
                cadastro();
            }
            case 1 ->{
                excluiManu();
            }
            case 2 ->{
                alteraManu();
            }
        }
        
    }//GEN-LAST:event_btEnviarActionPerformed

    private void cxCaixaBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cxCaixaBuscaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cxCaixaBuscaActionPerformed

    private void mnBarraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnBarraMouseClicked
        if(JOptionPane.showConfirmDialog(null, "Deseja realmente sair?", "confirmacao sair", JOptionPane.YES_NO_OPTION) == 0){
            dispose();
        }
    }//GEN-LAST:event_mnBarraMouseClicked

    private void btAltStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAltStatusActionPerformed
        CardLayout tela = (CardLayout) Base.getLayout();
        tela.show(Base, "AltStatus");
        tabelaManutencs();
    }//GEN-LAST:event_btAltStatusActionPerformed

    private void cxCodManu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cxCodManu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cxCodManu1ActionPerformed

    private void btVoltar8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltar8ActionPerformed
        CardLayout tela = (CardLayout) Base.getLayout();
        tela.show(Base, "MenuPrinc");
    }//GEN-LAST:event_btVoltar8ActionPerformed

    private void cbNovoStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNovoStatusActionPerformed
        if(cbNovoStatus.getSelectedItem().toString().equals("Selecione o novo status")){
            btAtualizar1.setEnabled(false);
        }else{
           btAtualizar1.setEnabled(true); 
        }
    }//GEN-LAST:event_cbNovoStatusActionPerformed

    private void btAtualizar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualizar1ActionPerformed
        alteraStatus();
        tabelaManutencs();
    }//GEN-LAST:event_btAtualizar1ActionPerformed

    public void listTab(){
        Armazenamento a = Armazenamento.geraArmazenamento();
        int posLin = 0;
        switch(opcao){
            case 1 -> {
                String[] colunas = {"Nome", "CPF"};
                DefaultTableModel modeloCli = new DefaultTableModel(colunas, 0);
                for(Cliente cli : a.getClientes()){
                    modeloCli.insertRow(posLin, new Object[]{cli.getNome(), cli.getCpf()});
                    posLin++;
                }
                tbConsultas.setModel(modeloCli);
                rtRotulo.setText("Digite o CPF");
                cbSelecAirs.setVisible(false);
            }
            case 2 -> {
                String[] colunas = {"Nome", "CPF"};
                DefaultTableModel modeloArm = new DefaultTableModel(colunas, 0);
                for(Armeiro arm : a.getArmeiros()){
                    modeloArm.insertRow(posLin, new Object[]{arm.getNome(), arm.getCpf()});
                    posLin++;
                }
                tbConsultas.setModel(modeloArm);
                rtRotulo.setText("Digite o CPF");
                cbSelecAirs.setVisible(false);
            }
            case 3 -> {
                String[] colunas = {"CEP", "Rua", "Numero", "Codigo"};
                DefaultTableModel modeloOfi = new DefaultTableModel(colunas, 0);
                for(Oficina ofi : a.getOficinas()){
                    modeloOfi.insertRow(posLin, new Object[]{ofi.getEndereco().getCep(), ofi.getEndereco().getRua(), ofi.getEndereco().getNumero(), ofi.getCod_oficina()});
                    posLin++;
                }
                tbConsultas.setModel(modeloOfi);
                rtRotulo.setText("Digite o codigo");
                cbSelecAirs.setVisible(false);
            }
            case 4 -> {
                switch(opcaoAirsoft){
                    case 1 -> {
                        String[] colunas = {"Modelo", "Marca", "Mecanismo", "Registro", "Qtd de Canos", "Espalhamento"};
                        DefaultTableModel modeloShotgun = new DefaultTableModel(colunas, 0);
                        for(Shotguns shot : a.getShotguns()){
                            modeloShotgun.insertRow(posLin, new Object[]{shot.getModelo(), shot.getMarca(), shot.getMecanismo(), shot.getRegistro(), shot.getQuantidadeCanos(), shot.getEspalhamento()});
                            posLin++;
                        }
                        tbConsultas.setModel(modeloShotgun);
                    }
                    case 2 -> {
                        String[] colunas = {"Modelo", "Marca", "Mecanismo", "Registro", "Classe", "Modo de Tiro"};
                        DefaultTableModel modeloRifle = new DefaultTableModel(colunas, 0);
                        for(Rifles rif : a.getRifles()){
                            modeloRifle.insertRow(posLin, new Object[]{rif.getModelo(), rif.getMarca(), rif.getMecanismo(), rif.getRegistro(), rif.getClasse(), rif.getModoDeTiro()});
                            posLin++;
                        }
                        tbConsultas.setModel(modeloRifle);
                    }
                    case 3 -> {
                        String[] colunas = {"Modelo", "Marca", "Mecanismo", "Registro", "Blowback", "Tipo de Grip"};
                        DefaultTableModel modeloPistola = new DefaultTableModel(colunas, 0);
                        for(Pistolas pist : a.getPistolas()){
                            modeloPistola.insertRow(posLin, new Object[]{pist.getModelo(), pist.getMarca(), pist.getMecanismo(), pist.getRegistro(), pist.getBlowback(), pist.getTipoGrip()});
                            posLin++;
                        }
                        tbConsultas.setModel(modeloPistola);
                    }
                    default -> {
                        String[] colunas = {"Modelo", "Marca", "Mecanismo", "Registro"};
                        DefaultTableModel modeloAirsoft = new DefaultTableModel(colunas, 0);
                        modeloAirsoft.insertRow(posLin, new Object[]{"RIFLES"});
                        posLin++;
                        for(Rifles rif : a.getRifles()){
                            modeloAirsoft.insertRow(posLin, new Object[]{rif.getModelo(), rif.getMarca(), rif.getMecanismo(), rif.getRegistro()});
                            posLin++;
                        }
                        modeloAirsoft.insertRow(posLin, new Object[]{"SHOTGUNS"});
                        posLin++;
                        for(Shotguns shot : a.getShotguns()){
                            modeloAirsoft.insertRow(posLin, new Object[]{shot.getModelo(), shot.getMarca(), shot.getMecanismo(), shot.getRegistro()});
                            posLin++;
                        }
                        modeloAirsoft.insertRow(posLin, new Object[]{"PISTOLAS"});
                        posLin++;
                        for(Pistolas pist : a.getPistolas()){
                            modeloAirsoft.insertRow(posLin, new Object[]{pist.getModelo(), pist.getMarca(), pist.getMecanismo(), pist.getRegistro()});
                            posLin++;
                        }
                        tbConsultas.setModel(modeloAirsoft);
                    }
                }
                rtRotulo.setText("Digite o Registro");
                cbSelecAirs.setVisible(true);
            }
            case 5 -> {
                String[] colunas = {"Cod(Manutencao)", "Status", "CPF(cliente)", "CPF(Armeiro)", "Cod(Oficina)", "Registro{Airsoft}"};
                DefaultTableModel modeloManu = new DefaultTableModel(colunas, 0);
                for(Manutencao manu : a.getManutencoes()){
                    if(manu.getShotguns() != null){
                        modeloManu.insertRow(posLin, new Object[]{manu.getCodManutencao(), manu.getStatus(), manu.getCliente().getCpf(), manu.getArmeiro().getCpf(), manu.getOficina().getCod_oficina(), manu.getShotguns().getRegistro()});
                    }else if(manu.getRifles() != null){
                        modeloManu.insertRow(posLin, new Object[]{manu.getCodManutencao(), manu.getStatus(), manu.getCliente().getCpf(), manu.getArmeiro().getCpf(), manu.getOficina().getCod_oficina(), manu.getRifles().getRegistro()});
                    }else if(manu.getPistolas() != null){
                        modeloManu.insertRow(posLin, new Object[]{manu.getCodManutencao(), manu.getStatus(), manu.getCliente().getCpf(), manu.getArmeiro().getCpf(), manu.getOficina().getCod_oficina(), manu.getPistolas().getRegistro()});
                    }
                    posLin++;
                }
                tbConsultas.setModel(modeloManu);
                rtRotulo.setText("Digite o codigo");
                cbSelecAirs.setVisible(false);
            }
        }
    }
    
    public void tabelaManutencs(){
        Armazenamento a = Armazenamento.geraArmazenamento();
        int posLin = 0;
        String[] colunas = {"Codigo da Manutencao", "Status", "Registro Airsoft", "Modelo Airsoft"};
        DefaultTableModel modeloManuStats = new DefaultTableModel(colunas, 0);
        for(Manutencao manu : a.getManutencoes()){
            if(manu.getShotguns() != null){
                modeloManuStats.insertRow(posLin, new Object[]{manu.getCodManutencao(), manu.getStatus(), manu.getShotguns().getRegistro(), manu.getShotguns().getModelo()});
            }else if(manu.getRifles() != null){
                modeloManuStats.insertRow(posLin, new Object[]{manu.getCodManutencao(), manu.getStatus(), manu.getRifles().getRegistro(), manu.getRifles().getModelo()});
            }else if(manu.getPistolas() != null){
                modeloManuStats.insertRow(posLin, new Object[]{manu.getCodManutencao(), manu.getStatus(), manu.getPistolas().getRegistro(), manu.getPistolas().getModelo()});
            }
            posLin++;
        }
        tbManutencs.setModel(modeloManuStats);
    }
   
    public void excluirSelec(){
        altOUexc = true;
        switch(opcao){
            case 1 -> {
                cxNome1.setVisible(false);
                rtNovoNome.setVisible(false);
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "AltExcPes");
            }
            case 2 -> {
                cxNome1.setVisible(false);
                rtNovoNome.setVisible(false);
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "AltExcPes");
            }
            case 3 -> {
                rtNovoEnder.setVisible(false);
                rtNum1.setVisible(false);
                rtCep1.setVisible(false);
                rtRua1.setVisible(false);
                cxNum1.setVisible(false);
                cxCep1.setVisible(false);
                cxRua1.setVisible(false);
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "AltExcOfi");
            }
            case 4 ->{
                airsCadExcAlt = 1;
                mostraAirsoft();
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "CadExcAltAirs");
            }
            case 5 -> {
                cadAltExcManu = 1;
                mostraCadAltExcManuItens();
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "CadAltExcManu");
            }
        }
    }
    
    public void mostraCadAltExcManuItens(){
        if(cadAltExcManu == 1){
            rtCli.setVisible(false);
            rtArm.setVisible(false);
            rtAir.setVisible(false);
            rtOfi.setVisible(false);
            rtCpfCli.setVisible(false);
            rtCpfArm.setVisible(false);
            rtCodigoOfi.setVisible(false);
            rtRegistroAir.setVisible(false);
            cxCpfCli.setVisible(false);
            cxCpfArm.setVisible(false);
            cxCodigoOfi.setVisible(false);
            cxRegistroAirs.setVisible(false);
        }else{
            rtCli.setVisible(true);
            rtArm.setVisible(true);
            rtAir.setVisible(true);
            rtOfi.setVisible(true);
            rtCpfCli.setVisible(true);
            rtCpfArm.setVisible(true);
            rtCodigoOfi.setVisible(true);
            rtRegistroAir.setVisible(true);
            cxCpfCli.setVisible(true);
            cxCpfArm.setVisible(true);
            cxCodigoOfi.setVisible(true);
            cxRegistroAirs.setVisible(true);
        }
        
    }
    
    public void alteraSelec(){
        altOUexc = false;
        switch(opcao){
            case 1 -> {
                cxNome1.setVisible(true);
                rtNovoNome.setVisible(true);
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "AltExcPes");
            }
            case 2 -> {
                cxNome1.setVisible(true);
                rtNovoNome.setVisible(true);
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "AltExcPes");
            }
            case 3 -> {
                rtNovoEnder.setVisible(true);
                rtNum1.setVisible(true);
                rtCep1.setVisible(true);
                rtRua1.setVisible(true);
                cxNum1.setVisible(true);
                cxCep1.setVisible(true);
                cxRua1.setVisible(true);
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "AltExcOfi");
            }
            case 4 ->{
                airsCadExcAlt = 2;
                mostraAirsoft();
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "CadExcAltAirs");
            }
            case 5 -> {
                cadAltExcManu = 2;
                mostraCadAltExcManuItens();
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "CadAltExcManu");
            }
        }
    }
    
    public void excluiPes(){
        Armazenamento a = Armazenamento.geraArmazenamento();
        if(opcao == 1){
            Cliente cli = new Cliente();
            cli.setCpf(cxCpf1.getText());
            cli = a.excCli(cli);
            if(cli == null){
                JOptionPane.showMessageDialog(null, "Cliente excluido com sucesso", "exclusao de cliente", JOptionPane.INFORMATION_MESSAGE);
                cxCpf1.setText("");
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "MenuPrinc");
            }else{
                JOptionPane.showMessageDialog(null, "Cliente nao encontrado", "exclusao de cliente", JOptionPane.ERROR_MESSAGE);
                cxCpf1.setText("");
            }
        }else{
            Armeiro arm = new Armeiro();
            arm.setCpf(cxCpf1.getText());
            arm = a.excArm(arm);
            if(arm == null){
                JOptionPane.showMessageDialog(null, "Armeiro excluido com sucesso", "exclusao de armeiro", JOptionPane.INFORMATION_MESSAGE);
                cxCpf1.setText("");
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "MenuPrinc");
            }else{
                JOptionPane.showMessageDialog(null, "Armeiro nao encontrado", "exclusao de armeiro", JOptionPane.ERROR_MESSAGE);
                cxCpf1.setText("");
            }
        }
    }

    public void alteraPes(){
        Armazenamento a = Armazenamento.geraArmazenamento();
        try{
            a.tratStringInvalida(cxNome1.getText());
            if(opcao == 1){
                Cliente cli = new Cliente();
                cli.setCpf(cxCpf1.getText());
                cli = a.altCliCpf(cli, cxNome1.getText());
                if(cli != null){
                    JOptionPane.showMessageDialog(null, "Cliente alterado com sucesso", "alteracao de cliente", JOptionPane.INFORMATION_MESSAGE);
                    cxCpf1.setText("");
                    CardLayout tela = (CardLayout) Base.getLayout();
                    tela.show(Base, "MenuPrinc");
                }else{
                    JOptionPane.showMessageDialog(null, "Operacao nao realizada", "alteracao de cliente", JOptionPane.ERROR_MESSAGE);
                    cxCpf1.setText("");
                }
            }else{
                Armeiro arm = new Armeiro();
                arm.setCpf(cxCpf1.getText());
                arm = a.altArmCpf(arm, cxNome1.getText());
                if(arm != null){
                    JOptionPane.showMessageDialog(null, "Armeiro alterado com sucesso", "alteracao de armeiro", JOptionPane.INFORMATION_MESSAGE);
                    cxCpf1.setText("");
                    CardLayout tela = (CardLayout) Base.getLayout();
                    tela.show(Base, "MenuPrinc");
                }else{
                    JOptionPane.showMessageDialog(null, "Operacao nao realizada", "alteracao de armeiro", JOptionPane.ERROR_MESSAGE);
                    cxCpf1.setText("");
                }
            }
        }
        catch(StringInvalidaException sie){
            sie.msgAlerta();
            cxNome1.requestFocus();
        }
    }
    
    public void excluiOfi(){
        Armazenamento a = Armazenamento.geraArmazenamento();
        Oficina ofi = new Oficina();
        int cod = a.tratNumberException(cxCodOfi1.getText());
        if(cod == -1){
            cxCodOfi1.setText("");
            cxCodOfi1.requestFocus();
        }else{
            ofi.setCod_oficina(cod);
            ofi = a.excOfi(ofi);
            if(ofi == null){
                JOptionPane.showMessageDialog(null, "Oficina excluida com sucesso", "exclusao oficina", JOptionPane.INFORMATION_MESSAGE);
                cxCodOfi1.setText("");
                CardLayout tela = (CardLayout) Base.getLayout();
                tela.show(Base, "MenuPrinc");
            }else{
                JOptionPane.showMessageDialog(null, "Oficina nao encontrada", "exclusao oficina", JOptionPane.ERROR_MESSAGE);
                cxCodOfi1.setText("");
            }
        }
    }
 
    public void alteraOfi(){
        try{
            Armazenamento a = Armazenamento.geraArmazenamento();
            Oficina ofi = new Oficina();
            int cod = a.tratNumberException(cxCodOfi1.getText());
            int num = a.tratNumberException(cxNum1.getText());
            int cep = a.tratNumberException(cxCep1.getText());
            a.tratStringInvalida(cxRua1.getText());
            String rua = cxRua1.getText();
            if(cod == -1){
                JOptionPane.showMessageDialog(null, "Insira um codigo numerico", "tratamento de numberformat", JOptionPane.ERROR_MESSAGE);
                cxCodOfi1.setText("");
                cxCodOfi1.requestFocus();
            }else if(cep == -1){
                JOptionPane.showMessageDialog(null, "Insira um cep numerico", "tratamento de numberformat", JOptionPane.ERROR_MESSAGE);
                cxCep1.setText("");
                cxCep1.requestFocus();
            }else if(num == -1){
                JOptionPane.showMessageDialog(null, "Insira um numero numerico", "tratamento de numberformat", JOptionPane.ERROR_MESSAGE);
                cxNum1.setText("");
                cxNum1.requestFocus();
            }else{
                ofi.setCod_oficina(cod);
                ofi = a.altOfiCod(ofi, rua, num, cep);
                if(ofi != null){
                    JOptionPane.showMessageDialog(null, "Oficina alterada com sucesso", "alteracao de armeiro", JOptionPane.INFORMATION_MESSAGE);
                    cxCodOfi1.setText("");
                    CardLayout tela = (CardLayout) Base.getLayout();
                    tela.show(Base, "MenuPrinc");
                }else{
                    JOptionPane.showMessageDialog(null, "Operacao nao realizada", "alteracao de armeiro", JOptionPane.ERROR_MESSAGE);
                    cxCodOfi1.setText("");
                }
            }
        }
        catch(StringInvalidaException sie){
            sie.msgAlerta();
            cxRua1.requestFocus();
        }
        
    }

    public void confereRegAirs_Alt_Exc(){
        Armazenamento a = Armazenamento.geraArmazenamento();
        switch(opcaoAirsoft){
            case 1 -> {
                Shotguns shot = new Shotguns();
                shot.setMarca(null);
                int reg = a.tratNumberException(cxRegistro.getText());
                if(reg == -1){
                    JOptionPane.showMessageDialog(null, "Digite um registro numerico", "cad shotgun", JOptionPane.ERROR_MESSAGE);
                    cxRegistro.setText("");
                    cxRegistro.requestFocus();
                }else{
                    shot.setRegistro(reg);
                    if(airsCadExcAlt == 1){
                        shot = a.excShot(shot);
                        if(shot == null){
                            JOptionPane.showMessageDialog(null, "Shotguns excluida com sucesso", "exclusao shotgun", JOptionPane.INFORMATION_MESSAGE);
                            cxRegistro.setText("");
                            CardLayout tela = (CardLayout) Base.getLayout();
                            tela.show(Base, "MenuPrinc");
                        }else{
                            JOptionPane.showMessageDialog(null, "Shotgun nao encontrada", "exclusao shotgun", JOptionPane.ERROR_MESSAGE);
                            cxRegistro.setText("");
                        }
                    }else{
                        if(canos == 0){
                            JOptionPane.showMessageDialog(null, "Escolha a quantidade de canos", "cad cod oficina", JOptionPane.ERROR_MESSAGE);
                        }else if("Selecione".equals(cbEspalhamento.getSelectedItem().toString())){
                            JOptionPane.showMessageDialog(null, "Escolha o espalhamento", "cad shot", JOptionPane.ERROR_MESSAGE);
                        }else{
                            shot = a.altShot(shot, cxMarca.getText(), cxMecanismo.getText(), cxModelo.getText(), cbEspalhamento.getSelectedItem().toString(), canos);
                            if(shot != null){
                                JOptionPane.showMessageDialog(null, "Shotgun alterada com sucesso", "alteracao de shotgun", JOptionPane.INFORMATION_MESSAGE);
                                cxMecanismo.setText("");
                                cxMarca.setText("");
                                cxModelo.setText("");
                                cxRegistro.setText("");
                                cbEspalhamento.setSelectedItem("Selecione");
                                cbCanos.setSelectedItem("Selecione");
                                cbSelecAirs.setSelectedIndex(0);
                                CardLayout tela = (CardLayout) Base.getLayout();
                                tela.show(Base, "MenuPrinc");
                            }else{
                                JOptionPane.showMessageDialog(null, "Operacao nao realizada", "alteracao de shotgun", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }  
            }
            case 2 -> {
                Rifles rif = new Rifles();
                rif.setMarca(null);
                int reg = a.tratNumberException(cxRegistro.getText());
                if(reg == -1){
                    JOptionPane.showMessageDialog(null, "Digite um registro numerico", "cad rifle", JOptionPane.ERROR_MESSAGE);
                    cxRegistro.setText("");
                    cxRegistro.requestFocus();
                }else{
                    rif.setRegistro(reg);
                    if(airsCadExcAlt == 1){
                        rif = a.excRif(rif);
                        if(rif == null){
                            JOptionPane.showMessageDialog(null, "Rifle excluido com sucesso", "exclusao rifle", JOptionPane.INFORMATION_MESSAGE);
                            cxRegistro.setText("");
                            CardLayout tela = (CardLayout) Base.getLayout();
                            tela.show(Base, "MenuPrinc");
                        }else{
                            JOptionPane.showMessageDialog(null, "Pistola nao encontrada", "exclusao rifle", JOptionPane.ERROR_MESSAGE);
                            cxRegistro.setText("");
                        }
                    }else{
                        if("Selecione".equals(cbClasse.getSelectedItem().toString())){
                            JOptionPane.showMessageDialog(null, "Selecione uma classe", "alt rifles", JOptionPane.ERROR_MESSAGE);
                        }else if("Selecione".equals(cbModoTiro.getSelectedItem().toString())){
                            JOptionPane.showMessageDialog(null, "Selecione um modo de tiro", "alt rifles", JOptionPane.ERROR_MESSAGE);
                        }else{
                            rif = a.altRif(rif, cxMarca.getText(), cxMecanismo.getText(), cxModelo.getText(), cbClasse.getSelectedItem().toString(), cbModoTiro.getSelectedItem().toString());
                            if(rif != null){
                                JOptionPane.showMessageDialog(null, "Pistola alterada com sucesso", "alteracao de pistola", JOptionPane.INFORMATION_MESSAGE);
                                cxMecanismo.setText("");
                                cxMarca.setText("");
                                cxModelo.setText("");
                                cxRegistro.setText("");
                                cbClasse.setSelectedItem("Selecione");
                                cbModoTiro.setSelectedItem("Selecione");
                                cbSelecAirs.setSelectedIndex(0);
                                CardLayout tela = (CardLayout) Base.getLayout();
                                tela.show(Base, "MenuPrinc");
                            }else{
                                JOptionPane.showMessageDialog(null, "Operacao nao realizada", "alteracao de shotgun", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }
            } 
            case 3 -> {
                Pistolas pist = new Pistolas();
                pist.setMarca(null);
                int reg = a.tratNumberException(cxRegistro.getText());
                if(reg == -1){
                    JOptionPane.showMessageDialog(null, "Digite um registro numerico", "cad pistola", JOptionPane.ERROR_MESSAGE);
                    cxRegistro.setText("");
                    cxRegistro.requestFocus();
                }else{
                    pist.setRegistro(reg);
                    if(airsCadExcAlt == 1){
                        pist = a.excPist(pist);
                        if(pist == null){
                            JOptionPane.showMessageDialog(null, "Pistola excluida com sucesso", "exclusao pistola", JOptionPane.INFORMATION_MESSAGE);
                            cxRegistro.setText("");
                            CardLayout tela = (CardLayout) Base.getLayout();
                            tela.show(Base, "MenuPrinc");
                        }else{
                            JOptionPane.showMessageDialog(null, "Pistola nao encontrada", "exclusao shotgun", JOptionPane.ERROR_MESSAGE);
                            cxRegistro.setText("");
                        }
                    }else{
                        if("Selecione".equals(cbGrip.getSelectedItem().toString())){
                            JOptionPane.showMessageDialog(null, "Escolha a quantidade de canos", "cad cod oficina", JOptionPane.ERROR_MESSAGE);
                        }else{
                            pist = a.altPist(pist, cxMarca.getText(), cxMecanismo.getText(), cxModelo.getText(), cbGrip.getSelectedItem().toString(), rdBlowback.isSelected());
                            if(pist != null){
                                JOptionPane.showMessageDialog(null, "Pistola alterada com sucesso", "alteracao de pistola", JOptionPane.INFORMATION_MESSAGE);
                                cxMecanismo.setText("");
                                cxMarca.setText("");
                                cxModelo.setText("");
                                cxRegistro.setText("");
                                cbGrip.setSelectedItem("Selecione");
                                rdBlowback.setSelected(false);
                                cbSelecAirs.setSelectedIndex(0);
                                CardLayout tela = (CardLayout) Base.getLayout();
                                tela.show(Base, "MenuPrinc");
                            }else{
                                JOptionPane.showMessageDialog(null, "Operacao nao realizada", "alteracao de shotgun", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }
            }
            default -> {
                JOptionPane.showMessageDialog(null, "Selecione um tipo de airsoft", "AltExc de airsoft", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    public void cadastro(){
        Armazenamento a = Armazenamento.geraArmazenamento();
        switch(opcao){
            case 1 -> {
                try{
                    a.tratStringInvalida(cxNome.getText());
                    a.tratStringInvalida(cxCpf.getText());
                    Cliente cli = new Cliente();
                    cli.setNome(cxNome.getText());
                    cli.setCpf(cxCpf.getText());
                    cli = a.insCli(cli);
                    if(cli != null){
                        JOptionPane.showMessageDialog(null, "Cliente cadastrado com sucesso", "cadastro de cliente", JOptionPane.INFORMATION_MESSAGE);
                        cxCpf.setText("");
                        cxNome.setText("");
                        if(JOptionPane.showConfirmDialog(null, "Deseja cadastrar outro cliente?", "confirmacao sair", JOptionPane.YES_NO_OPTION) != 0){
                            CardLayout tela = (CardLayout) Base.getLayout();
                            tela.show(Base, "MenuPrinc");
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "Ja existe uma pessoa com esse CPF", "cadastro de cliente", JOptionPane.ERROR_MESSAGE);
                        cxCpf.setText("");
                        cxCpf.requestFocus();
                    } 
                }
                catch(StringInvalidaException sie){
                    sie.msgAlerta();
                    cxCpf.setText("");
                    cxNome.setText("");
                }
            }
            case 2 -> {
                try{
                    a.tratStringInvalida(cxNome.getText());
                    a.tratStringInvalida(cxCpf.getText());
                    Armeiro arm = new Armeiro();
                    arm.setNome(cxNome.getText());
                    arm.setCpf(cxCpf.getText());
                    arm = a.insArm(arm);
                    if(arm != null){
                        JOptionPane.showMessageDialog(null, "Armeiro cadastrado com sucesso", "cadastro de armeiro", JOptionPane.INFORMATION_MESSAGE);
                        cxCpf.setText("");
                        cxNome.setText("");
                        if(JOptionPane.showConfirmDialog(null, "Deseja cadastrar outro armeiro?", "confirmacao sair", JOptionPane.YES_NO_OPTION) != 0){
                            CardLayout tela = (CardLayout) Base.getLayout();
                            tela.show(Base, "MenuPrinc");
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "Ja existe uma pessoa com esse CPF", "cadastro de armeiro", JOptionPane.ERROR_MESSAGE);
                        cxCpf.setText("");
                        cxCpf.requestFocus();
                    }
                }
                
                catch(StringInvalidaException sie){
                    sie.msgAlerta();
                    cxCpf.setText("");
                    cxNome.setText("");
                }
            }
            case 3 -> {
                try{
                    a.tratStringInvalida(cxRua.getText());
                    Oficina ofi = new Oficina();
                    ofi.getEndereco().setRua(cxRua.getText());
                    int cod, num, cep;
                    cod = a.tratNumberException(cxCodOfi.getText());
                    num = a.tratNumberException(cxNum.getText());
                    cep = a.tratNumberException(cxCep.getText());   
                    if(cod == -1){
                        JOptionPane.showMessageDialog(null, "Digite um codigo numerico", "cad cod oficina", JOptionPane.ERROR_MESSAGE);
                        cxCodOfi.setText("");
                        cxCodOfi.requestFocus();
                    }else if(cep == -1){
                        JOptionPane.showMessageDialog(null, "Digite um cep numerico", "cad cep oficina", JOptionPane.ERROR_MESSAGE);
                        cxCep.setText("");
                        cxCep.requestFocus();
                    }else if(num == -1){
                        JOptionPane.showMessageDialog(null, "Digite um numero numerico", "cad num oficina", JOptionPane.ERROR_MESSAGE);
                        cxNum.setText("");
                        cxNum.requestFocus();
                    }else{
                        ofi.setCod_oficina(cod);
                        ofi.getEndereco().setNumero(num);
                        ofi.getEndereco().setCep(cep);
                        ofi = a.insOfi(ofi);
                        if(ofi != null){
                            JOptionPane.showMessageDialog(null, "Oficina cadastrada com sucesso", "cadastro de oficina", JOptionPane.INFORMATION_MESSAGE);
                            cxCep.setText("");
                            cxNum.setText("");
                            cxCodOfi.setText("");
                            cxRua.setText("");
                            if(JOptionPane.showConfirmDialog(null, "Deseja cadastrar outra oficina?", "confirmacao sair", JOptionPane.YES_NO_OPTION) != 0){
                                CardLayout tela = (CardLayout) Base.getLayout();
                                tela.show(Base, "MenuPrinc");
                            }
                        }else{
                            JOptionPane.showMessageDialog(null, "Ja existe uma oficina com esse codigo", "cadastro de oficina", JOptionPane.ERROR_MESSAGE);
                            cxCodOfi.setText("");
                            cxCodOfi.requestFocus();
                        }
                    }
                }
                catch(StringInvalidaException sie){
                    sie.msgAlerta();
                    cxRua.setText("");
                    cxRua.requestFocus();
                }
                
                
            } 
            case 4 -> {
                try{
                    a.tratStringInvalida(cxModelo.getText());
                    a.tratStringInvalida(cxMecanismo.getText());
                    a.tratStringInvalida(cxMarca.getText());
                    switch(opcaoAirsoft){
                        case 1 -> {
                            Shotguns shot = new Shotguns();
                            shot.setMecanismo(cxMecanismo.getText());
                            shot.setMarca(cxMarca.getText());
                            shot.setModelo(cxModelo.getText());
                            int reg = a.tratNumberException(cxRegistro.getText());
                            if(reg == -1){
                                JOptionPane.showMessageDialog(null, "Digite um registro numerico", "cad shotgun", JOptionPane.ERROR_MESSAGE);
                                cxRegistro.setText("");
                                cxRegistro.requestFocus();
                            }else if(canos == 0){
                                JOptionPane.showMessageDialog(null, "Escolha a quantidade de canos", "cad shotgun", JOptionPane.ERROR_MESSAGE);
                            }else if("Selecione".equals(cbEspalhamento.getSelectedItem().toString())){
                                JOptionPane.showMessageDialog(null, "Escolha o espalhamento", "cad shotgun", JOptionPane.ERROR_MESSAGE);
                            }else{
                                shot.setRegistro(reg);
                                shot.setQuantidadeCanos(canos);
                                shot.setEspalhamento(cbEspalhamento.getSelectedItem().toString());
                                shot = a.insShot(shot);
                                if(shot != null){
                                    JOptionPane.showMessageDialog(null, "Airsoft cadastrada com sucesso", "cadastro de shotgun", JOptionPane.INFORMATION_MESSAGE);
                                    cxMecanismo.setText("");
                                    cxMarca.setText("");
                                    cxModelo.setText("");
                                    cxRegistro.setText("");
                                    cbEspalhamento.setSelectedItem("Selecione");
                                    cbCanos.setSelectedItem("Selecione");
                                    cbSelecAirs.setSelectedIndex(0);
                                    if(JOptionPane.showConfirmDialog(null, "Deseja cadastrar outra Airsoft?", "confirmacao sair", JOptionPane.YES_NO_OPTION) != 0){
                                        CardLayout tela = (CardLayout) Base.getLayout();
                                        tela.show(Base, "MenuPrinc");
                                    }
                                }else{
                                    cxRegistro.setText("");
                                    cxRegistro.requestFocus();
                                    JOptionPane.showMessageDialog(null, "Ja existe uma airsoft com esse registro", "cadastro de airsoft", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }
                        case 2 -> {
                            Rifles rif = new Rifles();
                            rif.setMecanismo(cxMecanismo.getText());
                            rif.setMarca(cxMarca.getText());
                            rif.setModelo(cxModelo.getText());
                            int reg = a.tratNumberException(cxRegistro.getText());
                            if(reg == -1){
                                JOptionPane.showMessageDialog(null, "Digite um registro numerico", "cad rifles", JOptionPane.ERROR_MESSAGE);
                                cxRegistro.setText("");
                                cxRegistro.requestFocus();
                            }else if("Selecione".equals(cbClasse.getSelectedItem().toString())){
                                JOptionPane.showMessageDialog(null, "Selecione uma classe", "cad rifles", JOptionPane.ERROR_MESSAGE);
                            }else if("Selecione".equals(cbModoTiro.getSelectedItem().toString())){
                                JOptionPane.showMessageDialog(null, "Selecione um modo de tiro", "cad rifles", JOptionPane.ERROR_MESSAGE);
                            }else{
                                rif.setRegistro(reg);
                                rif.setModoDeTiro(cbModoTiro.getSelectedItem().toString());
                                rif.setClasse(cbClasse.getSelectedItem().toString());
                                rif = a.insRif(rif);
                                if(rif != null){
                                    JOptionPane.showMessageDialog(null, "Airsoft cadastrada com sucesso", "cadastro de rifle", JOptionPane.INFORMATION_MESSAGE);
                                    cxMecanismo.setText("");
                                    cxMarca.setText("");
                                    cxModelo.setText("");
                                    cxRegistro.setText("");
                                    cbClasse.setSelectedItem("Selecione");
                                    cbModoTiro.setSelectedItem("Selecione");
                                    cbSelecAirs.setSelectedIndex(0);
                                    if(JOptionPane.showConfirmDialog(null, "Deseja cadastrar outra Airsoft?", "confirmacao sair", JOptionPane.YES_NO_OPTION) != 0){
                                        CardLayout tela = (CardLayout) Base.getLayout();
                                        tela.show(Base, "MenuPrinc");
                                    }
                                }else{
                                    cxRegistro.setText("");
                                    cxRegistro.requestFocus();
                                    JOptionPane.showMessageDialog(null, "Ja existe uma airsoft com esse registro", "cadastro de airsoft", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        } 
                        case 3 -> {
                            Pistolas pist = new Pistolas();
                            pist.setMecanismo(cxMecanismo.getText());
                            pist.setMarca(cxMarca.getText());
                            pist.setModelo(cxModelo.getText());
                            int reg = a.tratNumberException(cxRegistro.getText());
                            if(reg == -1){
                                JOptionPane.showMessageDialog(null, "Digite um codigo numerico", "cad pistolas", JOptionPane.ERROR_MESSAGE);
                                cxRegistro.setText("");
                                cxRegistro.requestFocus();
                            }else if("Selecione".equals(cbGrip.getSelectedItem().toString())){
                                JOptionPane.showMessageDialog(null, "Selecione um tipo de grip", "cad pistolas", JOptionPane.ERROR_MESSAGE);
                            }else{
                                pist.setRegistro(reg);
                                pist.setBlowback(rdBlowback.isSelected());
                                pist.setTipoGrip(cbGrip.getSelectedItem().toString());
                                pist = a.insPist(pist);
                                if(pist != null){
                                    JOptionPane.showMessageDialog(null, "Airsoft cadastrada com sucesso", "cadastro de rifle", JOptionPane.INFORMATION_MESSAGE);
                                    cxMecanismo.setText("");
                                    cxMarca.setText("");
                                    cxModelo.setText("");
                                    cxRegistro.setText("");
                                    cbGrip.setSelectedItem("Selecione");
                                    rdBlowback.setSelected(false);
                                    cbSelecAirs.setSelectedIndex(0);
                                    if(JOptionPane.showConfirmDialog(null, "Deseja cadastrar outra Airsoft?", "confirmacao sair", JOptionPane.YES_NO_OPTION) != 0){
                                        CardLayout tela = (CardLayout) Base.getLayout();
                                        tela.show(Base, "MenuPrinc");
                                    }
                                }else{
                                    cxRegistro.setText("");
                                    cxRegistro.requestFocus();
                                    JOptionPane.showMessageDialog(null, "Ja existe uma airsoft com esse registro", "cadastro de airsoft", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }
                        default -> {
                            JOptionPane.showMessageDialog(null, "Selecione um tipo de airsoft", "cadastro de airsoft", JOptionPane.ERROR_MESSAGE);
                        } 
                    }
                }
                catch(StringInvalidaException sie){
                    sie.msgAlerta();
                }
                
                
                
            }    
            case 5 -> {
                boolean air = false;
                try{
                    a.tratStringInvalida(cxCodManu.getText());
                    Cliente cli = new Cliente();
                    Manutencao manu = new Manutencao();
                    Armeiro arm = new Armeiro();
                    Oficina ofi = new Oficina();
                    cli.setCpf(cxCpfCli.getText());
                    arm.setCpf(cxCpfArm.getText());
                    int codOfi = a.tratNumberException(cxCodigoOfi.getText());
                    int reg = a.tratNumberException(cxRegistroAirs.getText());
                    if(codOfi == -1){
                        JOptionPane.showMessageDialog(null, "O codigo de oficina deve ser numerico", "cadastro de manutencao", JOptionPane.ERROR_MESSAGE);
                        cxCodigoOfi.requestFocus();
                    }else if(reg == -1){
                        JOptionPane.showMessageDialog(null, "O registro de airsoft deve ser numerico", "cadastro de manutencao", JOptionPane.ERROR_MESSAGE);
                        cxRegistroAirs.requestFocus();
                    }else{
                        ofi.setCod_oficina(codOfi);
                        switch(a.tipoAirsoftPeloRegistro(reg)){
                            case 1 ->{
                                Shotguns shot = new Shotguns();
                                shot.setRegistro(reg);
                                manu.setShotguns(a.consShotReg(shot));
                            }
                            case 2 ->{
                                Rifles rif = new Rifles();
                                rif.setRegistro(reg);
                                manu.setRifles(a.consRifReg(rif));
                            }
                            case 3 ->{
                                Pistolas pist = new Pistolas();
                                pist.setRegistro(reg);
                                manu.setPistolas(a.consPistReg(pist));
                            }
                            default ->{
                                air = true;
                            }
                        }
                        if(air){
                            JOptionPane.showMessageDialog(null, "Airsoft nao existente", "cadastro de manutencao", JOptionPane.INFORMATION_MESSAGE);
                            cxRegistroAirs.requestFocus();
                        }else if(a.consCliCpf(cli) == null){
                            JOptionPane.showMessageDialog(null, "Cliente nao existente", "cadastro de manutencao", JOptionPane.INFORMATION_MESSAGE);
                            cxCpfCli.requestFocus();
                        }else if(a.consArmCpf(arm) == null){
                            JOptionPane.showMessageDialog(null, "Armeiro nao existente", "cadastro de manutencao", JOptionPane.INFORMATION_MESSAGE);
                            cxCpfArm.requestFocus();
                        }else if(a.consOfiCod(ofi) == null){
                            JOptionPane.showMessageDialog(null, "Oficina nao existente", "cadastro de manutencao", JOptionPane.INFORMATION_MESSAGE);
                            cxCodigoOfi.requestFocus();
                        }else{
                            manu.setArmeiro(arm);
                            manu.setCliente(cli);
                            manu.setOficina(ofi);
                            manu.setCodManutencao(cxCodManu.getText());
                            manu = a.insManu(manu);
                            manu.setStatus("Em espera");
                            if(manu != null){
                                JOptionPane.showMessageDialog(null, "Cadastro bem sucedido", "cadastro de manutencao", JOptionPane.INFORMATION_MESSAGE);
                                cxCpfCli.setText("");
                                cxCpfArm.setText("");
                                cxCodigoOfi.setText("");
                                cxRegistroAirs.setText("");
                                cxCodManu.setText("");
                                CardLayout tela = (CardLayout) Base.getLayout();
                                tela.show(Base, "MenuPrinc");
                            }
                        }
                    }
                }
                catch(StringInvalidaException sie){
                    sie.msgAlerta();
                    cxCodManu.setText("");
                    cxCodManu.requestFocus();
                }
            }    
        }
    }
    
    public void consultaUnitaria(){
        Armazenamento a = Armazenamento.geraArmazenamento();
        boolean flag1 = true;
        switch(opcao){
            case 1 -> {
                for(int i = 0; i < a.getClientes().size(); i++){
                    if(cxCaixaBusca.getText().equals(a.getClientes().get(i).getCpf())){
                        String[] colunas = {"Nome", "CPF"};
                        DefaultTableModel modeloArm1 = new DefaultTableModel(colunas, 0);
                        modeloArm1.insertRow(0, new Object[]{a.getClientes().get(i).getNome(), a.getClientes().get(i).getCpf()});
                        tbConsultas.setModel(modeloArm1);
                        flag1 = false;
                        cxCaixaBusca.setText("");
                    }
                }
                if(flag1){
                    JOptionPane.showMessageDialog(null, "Cliente nao encontrado", "busca de cliente", JOptionPane.ERROR_MESSAGE);
                }
            }
            case 2 -> {
                for(int i = 0; i < a.getArmeiros().size(); i++){
                    if(cxCaixaBusca.getText().equals(a.getArmeiros().get(i).getCpf())){
                        String[] colunas = {"Nome", "CPF"};
                        DefaultTableModel modeloCli1 = new DefaultTableModel(colunas, 0);
                        modeloCli1.insertRow(0, new Object[]{a.getArmeiros().get(i).getNome(), a.getArmeiros().get(i).getCpf()});
                        tbConsultas.setModel(modeloCli1);
                        flag1 = false;
                        cxCaixaBusca.setText("");
                    }
                }
                if(flag1){
                    JOptionPane.showMessageDialog(null, "Armeiro nao encontrado", "busca de armeiro", JOptionPane.ERROR_MESSAGE);
                }
            }
            case 3 -> {
                int codOfi = a.tratNumberException(cxCaixaBusca.getText());
                if(codOfi != -1){
                    for(int i = 0; i < a.getOficinas().size(); i++){
                        if(codOfi == a.getOficinas().get(i).getCod_oficina()){
                            String[] colunas = {"CEP", "Rua", "Numero", "Codigo"};
                            DefaultTableModel modeloOfi1 = new DefaultTableModel(colunas, 0);
                            modeloOfi1.insertRow(0, new Object[]{a.getOficinas().get(i).getEndereco().getCep(), a.getOficinas().get(i).getEndereco().getRua(), a.getOficinas().get(i).getEndereco().getNumero(), a.getOficinas().get(i).getCod_oficina()});
                            tbConsultas.setModel(modeloOfi1);
                            flag1 = false;
                            cxCaixaBusca.setText("");
                        }
                    }
                    if(flag1){
                        JOptionPane.showMessageDialog(null, "Oficina nao encontrado", "busca de oficina", JOptionPane.ERROR_MESSAGE);
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Digite um codigo numerico", "busca de oficina", JOptionPane.ERROR_MESSAGE);  
                }
                
            }
            case 4 ->{
                int reg = a.tratNumberException(cxCaixaBusca.getText());
                switch(opcaoAirsoft){
                    case 1 -> {
                        if(reg != -1){
                            for(int i = 0; i < a.getShotguns().size(); i++){
                                if(reg == a.getShotguns().get(i).getRegistro()){
                                    String[] colunas = {"Modelo", "Marca", "Mecanismo", "Registro", "Qtd de Canos", "Espalhamento"};
                                    DefaultTableModel modeloShot1 = new DefaultTableModel(colunas, 0);
                                    modeloShot1.insertRow(0, new Object[]{a.getShotguns().get(i).getModelo(), a.getShotguns().get(i).getMarca(), a.getShotguns().get(i).getMecanismo(), a.getShotguns().get(i).getRegistro(), a.getShotguns().get(i).getQuantidadeCanos(), a.getShotguns().get(i).getEspalhamento()});
                                    tbConsultas.setModel(modeloShot1);
                                    flag1 = false;
                                    cxCaixaBusca.setText("");
                                }
                            }
                            if(flag1){
                                JOptionPane.showMessageDialog(null, "Shotgun nao encontrado", "busca de shotgun", JOptionPane.ERROR_MESSAGE);
                            }
                        }else{
                            JOptionPane.showMessageDialog(null, "Digite um registro numerico", "busca de shotghun", JOptionPane.ERROR_MESSAGE);  
                        }
                    }
                    case 2 -> {
                        if(reg != -1){
                            for(int i = 0; i < a.getRifles().size(); i++){
                                if(reg == a.getRifles().get(i).getRegistro()){
                                    String[] colunas = {"Modelo", "Marca", "Mecanismo", "Registro", "Classe", "Modo de Tiro"};
                                    DefaultTableModel modeloRif1 = new DefaultTableModel(colunas, 0);
                                    modeloRif1.insertRow(0, new Object[]{a.getRifles().get(i).getModelo(), a.getRifles().get(i).getMarca(), a.getRifles().get(i).getMecanismo(), a.getRifles().get(i).getRegistro(), a.getRifles().get(i).getClasse(), a.getRifles().get(i).getModoDeTiro()});
                                    tbConsultas.setModel(modeloRif1);
                                    flag1 = false;
                                    cxCaixaBusca.setText("");
                                }
                            }
                            if(flag1){
                                JOptionPane.showMessageDialog(null, "Rifle nao encontrado", "busca de rifle", JOptionPane.ERROR_MESSAGE);
                            }
                        }else{
                            JOptionPane.showMessageDialog(null, "Digite um registro numerico", "busca de rifle", JOptionPane.ERROR_MESSAGE);  
                        }
                    }
                    case 3 -> {
                        if(reg != -1){
                            for(int i = 0; i < a.getPistolas().size(); i++){
                                if(reg == a.getPistolas().get(i).getRegistro()){
                                    String[] colunas = {"Modelo", "Marca", "Mecanismo", "Registro", "Blowback", "Tipo de Grip"};
                                    DefaultTableModel modeloPist1 = new DefaultTableModel(colunas, 0);
                                    modeloPist1.insertRow(0, new Object[]{a.getPistolas().get(i).getModelo(), a.getPistolas().get(i).getMarca(), a.getPistolas().get(i).getMecanismo(), a.getPistolas().get(i).getRegistro(), a.getPistolas().get(i).getBlowback(), a.getPistolas().get(i).getTipoGrip()});
                                    tbConsultas.setModel(modeloPist1);
                                    flag1 = false;
                                    cxCaixaBusca.setText("");
                                }
                            }
                            if(flag1){
                                JOptionPane.showMessageDialog(null, "Pistolas nao encontrado", "busca de armeiro", JOptionPane.ERROR_MESSAGE);
                            }
                        }else{
                            JOptionPane.showMessageDialog(null, "Digite um registro numerico", "busca de oficina", JOptionPane.ERROR_MESSAGE);  
                        }
                    }
                }
            }
            case 5 -> {
                String[] colunas = {"Cod(Manutencao)", "Status", "CPF(cliente)", "CPF(Armeiro)", "Cod(Oficina)", "Registro{Airsoft}"};
                DefaultTableModel modeloManuUni = new DefaultTableModel(colunas, 0);
                for(int i = 0; i < a.getManutencoes().size(); i++){
                    if(cxCaixaBusca.getText().equals(a.getManutencoes().get(i).getCodManutencao())){
                        if(a.getManutencoes().get(i).getShotguns() != null){
                            modeloManuUni.insertRow(0, new Object[]{a.getManutencoes().get(i).getCodManutencao(), a.getManutencoes().get(i).getStatus(), a.getManutencoes().get(i).getCliente().getCpf(), a.getManutencoes().get(i).getArmeiro().getCpf(), a.getManutencoes().get(i).getOficina().getCod_oficina(), a.getManutencoes().get(i).getShotguns().getRegistro()});
                        }else if(a.getManutencoes().get(i).getRifles() != null){
                            modeloManuUni.insertRow(0, new Object[]{a.getManutencoes().get(i).getCodManutencao(), a.getManutencoes().get(i).getStatus(), a.getManutencoes().get(i).getCliente().getCpf(), a.getManutencoes().get(i).getArmeiro().getCpf(), a.getManutencoes().get(i).getOficina().getCod_oficina(), a.getManutencoes().get(i).getRifles().getRegistro()});
                        }else if(a.getManutencoes().get(i).getPistolas() != null){
                            modeloManuUni.insertRow(0, new Object[]{a.getManutencoes().get(i).getCodManutencao(), a.getManutencoes().get(i).getStatus(), a.getManutencoes().get(i).getCliente().getCpf(), a.getManutencoes().get(i).getArmeiro().getCpf(), a.getManutencoes().get(i).getOficina().getCod_oficina(), a.getManutencoes().get(i).getPistolas().getRegistro()});
                        }
                        tbConsultas.setModel(modeloManuUni);
                        flag1 = false;
                        cxCaixaBusca.setText("");
                    }
                }
                if(flag1){
                    JOptionPane.showMessageDialog(null, "Manutencao nao encontrada", "busca de manutencao", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
    public void showHIDEbotao(){
        if(opcao == 4){
            cbSelecAirs1.setVisible(true);
            if(opcaoAirsoft == 0){
                btConsultaUni.setEnabled(false);
            }else{
                btConsultaUni.setEnabled(true);
            }
        }else{
            cbSelecAirs1.setVisible(false);
        } 
    }
    
    public void mostraAirsoft(){
        if(airsCadExcAlt == 1){
            btAltExcAirs.setText("Excluir");
            btAltExcAirs.setVisible(true);
            cxModelo.setVisible(false);
            cxMarca.setVisible(false);
            cxMecanismo.setVisible(false);
            rtModelo.setVisible(false);
            rtMarca.setVisible(false);
            rtMecanismo.setVisible(false);
            rtModoTiro.setVisible(false);
            rtClasse.setVisible(false);
            rtTipoGrip.setVisible(false);
            rtCanos.setVisible(false);
            rtEspalhamento.setVisible(false);
            cbModoTiro.setVisible(false);
            cbClasse.setVisible(false);
            cbGrip.setVisible(false);
            rdBlowback.setVisible(false);
            cbCanos.setVisible(false);
            cbEspalhamento.setVisible(false);
        }else{
            if(airsCadExcAlt == 2){
                btAltExcAirs.setVisible(true);
                btAltExcAirs.setText("Alterar");
                btEnviar5.setVisible(false);
            }else{
                btAltExcAirs.setVisible(false);
                btEnviar5.setVisible(true);
            }
            rtModelo.setVisible(true);
            rtMarca.setVisible(true);
            rtMecanismo.setVisible(true);
            cxModelo.setVisible(true);
            cxMarca.setVisible(true);
            cxMecanismo.setVisible(true);
            switch(opcaoAirsoft){
                case 1 -> {
                    rtModoTiro.setVisible(false);
                    rtClasse.setVisible(false);
                    rtTipoGrip.setVisible(false);
                    rtCanos.setVisible(true);
                    rtEspalhamento.setVisible(true);
                    cbModoTiro.setVisible(false);
                    cbClasse.setVisible(false);
                    cbGrip.setVisible(false);
                    rdBlowback.setVisible(false);
                    cbCanos.setVisible(true);
                    cbEspalhamento.setVisible(true);
                }
                case 2 ->{
                    rtModoTiro.setVisible(true);
                    rtClasse.setVisible(true);
                    rtTipoGrip.setVisible(false);
                    rtCanos.setVisible(false);
                    rtEspalhamento.setVisible(false);
                    cbModoTiro.setVisible(true);
                    cbClasse.setVisible(true);
                    cbGrip.setVisible(false);
                    rdBlowback.setVisible(false);
                    cbCanos.setVisible(false);
                    cbEspalhamento.setVisible(false);
                }
                case 3 ->{
                    rtModoTiro.setVisible(false);
                    rtClasse.setVisible(false);
                    rtTipoGrip.setVisible(true);
                    rtCanos.setVisible(false);
                    rtEspalhamento.setVisible(false);
                    cbModoTiro.setVisible(false);
                    cbClasse.setVisible(false);
                    cbGrip.setVisible(true);
                    rdBlowback.setVisible(true);
                    cbCanos.setVisible(false);
                    cbEspalhamento.setVisible(false);
                }
                default ->{
                    rtModoTiro.setVisible(false);
                    rtClasse.setVisible(false);
                    rtTipoGrip.setVisible(false);
                    rtCanos.setVisible(false);
                    rtEspalhamento.setVisible(false);
                    cbModoTiro.setVisible(false);
                    cbClasse.setVisible(false);
                    cbGrip.setVisible(false);
                    rdBlowback.setVisible(false);
                    cbCanos.setVisible(false);
                    cbEspalhamento.setVisible(false);
                }
            }
        }
    }
    
    public void alteraManu(){
        boolean air = false;
        Armazenamento a = Armazenamento.geraArmazenamento();
        Cliente cli = new Cliente();
        Manutencao manu = new Manutencao();
        Armeiro arm = new Armeiro();
        Oficina ofi = new Oficina();
        cli.setCpf(cxCpfCli.getText());
        arm.setCpf(cxCpfArm.getText());
        int codOfi = a.tratNumberException(cxCodigoOfi.getText());
        int reg = a.tratNumberException(cxRegistroAirs.getText());
        if(codOfi == -1){
            JOptionPane.showMessageDialog(null, "O codigo de oficina deve ser numerico", "cadastro de manutencao", JOptionPane.ERROR_MESSAGE);
            cxCodigoOfi.requestFocus();
        }else if(reg == -1){
            JOptionPane.showMessageDialog(null, "O registro de airsoft deve ser numerico", "cadastro de manutencao", JOptionPane.ERROR_MESSAGE);
            cxRegistroAirs.requestFocus();
        }else if(a.consCliCpf(cli) == null){
            JOptionPane.showMessageDialog(null, "Cliente nao existente", "cadastro de manutencao", JOptionPane.INFORMATION_MESSAGE);
            cxCpfCli.requestFocus();
        }else if(a.consArmCpf(arm) == null){
            JOptionPane.showMessageDialog(null, "Armeiro nao existente", "cadastro de manutencao", JOptionPane.INFORMATION_MESSAGE);
            cxCpfArm.requestFocus();
        }else{
            ofi.setCod_oficina(codOfi);
            if(a.consOfiCod(ofi) == null){
                JOptionPane.showMessageDialog(null, "Oficina nao existente", "cadastro de manutencao", JOptionPane.INFORMATION_MESSAGE);
                cxCodigoOfi.requestFocus();
            }else{
                manu.setCodManutencao(cxCodManu.getText());
                ofi.setCod_oficina(codOfi);
                switch(a.tipoAirsoftPeloRegistro(reg)){
                    case 1 ->{
                        Shotguns shot = new Shotguns();
                        shot.setRegistro(reg);
                        manu = a.altManu(manu, cli, arm, ofi, shot);
                    }
                    case 2 ->{
                        Rifles rif = new Rifles();
                        rif.setRegistro(reg);
                        manu = a.altManu(manu, cli, arm, ofi, rif);
                    }
                    case 3 ->{
                        Pistolas pist = new Pistolas();
                        pist.setRegistro(reg);
                        manu = a.altManu(manu, cli, arm, ofi, pist);
                    }
                    default ->{
                        air = true;
                    }
                }
                if(air){
                    JOptionPane.showMessageDialog(null, "Airsoft nao existente", "cadastro de manutencao", JOptionPane.INFORMATION_MESSAGE);
                    cxRegistroAirs.requestFocus();
                }else{
                    if(manu != null){
                        JOptionPane.showMessageDialog(null, "Alteracao bem sucedids", "cadastro de manutencao", JOptionPane.INFORMATION_MESSAGE);
                        cxCpfCli.setText("");
                        cxCpfArm.setText("");
                        cxCodigoOfi.setText("");
                        cxRegistroAirs.setText("");
                        cxCodManu.setText("");
                    }else{
                        JOptionPane.showMessageDialog(null, "Alteracao não sucedida", "cadastro de manutencao", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }
    
    public void excluiManu(){
        Armazenamento a = Armazenamento.geraArmazenamento();
        Manutencao manu = new Manutencao();
        manu.setCodManutencao(cxCodManu.getText());
        manu = a.excManu(manu);
        if(manu == null){
            JOptionPane.showMessageDialog(null, "Manutencao excluida com sucesso", "exclusao manutencao", JOptionPane.INFORMATION_MESSAGE);
            cxCodManu.setText("");
            CardLayout tela = (CardLayout) Base.getLayout();
            tela.show(Base, "MenuPrinc");
        }else{
            JOptionPane.showMessageDialog(null, "Manutencao nao encontrada", "exclusao manutencao", JOptionPane.ERROR_MESSAGE);
            cxCodManu.setText("");
        }
    }
    
    public void habilitaBotoes(){
        if(opcao == 0){
            btCadastrar.setEnabled(false);
            btConsultar.setEnabled(false);
            btExcluir.setEnabled(false);
            btAlterar.setEnabled(false);
            btAltStatus.setEnabled(false);
        }else{
            btCadastrar.setEnabled(true);
            btConsultar.setEnabled(true);
            btExcluir.setEnabled(true);
            btAlterar.setEnabled(true);
        }
    }
    
    public void alteraStatus(){
        Armazenamento a = Armazenamento.geraArmazenamento();
        Manutencao manu = new Manutencao();
        manu.setCodManutencao(cxCodManu1.getText());
        a.altStatus(manu, cbNovoStatus.getSelectedItem().toString());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new FormPrincipal().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AltExcOfi;
    private javax.swing.JPanel AltExcPes;
    private javax.swing.JPanel AltStatus;
    private javax.swing.JPanel Base;
    private javax.swing.JPanel CadAltExcManu;
    private javax.swing.JPanel CadExcAltAirs;
    private javax.swing.JPanel CadastroOfi;
    private javax.swing.JPanel CadastroPes;
    private javax.swing.JPanel Consultas;
    private javax.swing.JPanel MenuPrinc;
    private javax.swing.JButton btAltExcAirs;
    private javax.swing.JButton btAltStatus;
    private javax.swing.JButton btAlterar;
    private javax.swing.JButton btAtualizar1;
    private javax.swing.JButton btCadastrar;
    private javax.swing.JButton btConsultaUni;
    private javax.swing.JButton btConsultar;
    private javax.swing.JButton btEnviar;
    private javax.swing.JButton btEnviar1;
    private javax.swing.JButton btEnviar2;
    private javax.swing.JButton btEnviar3;
    private javax.swing.JButton btEnviar4;
    private javax.swing.JButton btEnviar5;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btVoltar1;
    private javax.swing.JButton btVoltar2;
    private javax.swing.JButton btVoltar3;
    private javax.swing.JButton btVoltar4;
    private javax.swing.JButton btVoltar5;
    private javax.swing.JButton btVoltar6;
    private javax.swing.JButton btVoltar7;
    private javax.swing.JButton btVoltar8;
    private javax.swing.JComboBox<String> cbCanos;
    private javax.swing.JComboBox<String> cbClasse;
    private javax.swing.JComboBox<String> cbEspalhamento;
    private javax.swing.JComboBox<String> cbGrip;
    private javax.swing.JComboBox<String> cbModoTiro;
    private javax.swing.JComboBox<String> cbNovoStatus;
    private javax.swing.JComboBox<String> cbSelecAirs;
    private javax.swing.JComboBox<String> cbSelecAirs1;
    private javax.swing.JComboBox<String> cbSelecTipo;
    private javax.swing.JTextField cxCaixaBusca;
    private javax.swing.JTextField cxCep;
    private javax.swing.JTextField cxCep1;
    private javax.swing.JTextField cxCodManu;
    private javax.swing.JTextField cxCodManu1;
    private javax.swing.JTextField cxCodOfi;
    private javax.swing.JTextField cxCodOfi1;
    private javax.swing.JTextField cxCodigoOfi;
    private javax.swing.JTextField cxCpf;
    private javax.swing.JTextField cxCpf1;
    private javax.swing.JTextField cxCpfArm;
    private javax.swing.JTextField cxCpfCli;
    private javax.swing.JTextField cxMarca;
    private javax.swing.JTextField cxMecanismo;
    private javax.swing.JTextField cxModelo;
    private javax.swing.JTextField cxNome;
    private javax.swing.JTextField cxNome1;
    private javax.swing.JTextField cxNum;
    private javax.swing.JTextField cxNum1;
    private javax.swing.JTextField cxRegistro;
    private javax.swing.JTextField cxRegistroAirs;
    private javax.swing.JTextField cxRua;
    private javax.swing.JTextField cxRua1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuBar mnBarra;
    private javax.swing.JMenu mnFecharAplicacao;
    private javax.swing.JRadioButton rdBlowback;
    private javax.swing.JLabel rtAir;
    private javax.swing.JLabel rtArm;
    private javax.swing.JLabel rtCanos;
    private javax.swing.JLabel rtCep;
    private javax.swing.JLabel rtCep1;
    private javax.swing.JLabel rtClasse;
    private javax.swing.JLabel rtCli;
    private javax.swing.JLabel rtCodManu;
    private javax.swing.JLabel rtCodManutenc;
    private javax.swing.JLabel rtCodOfi;
    private javax.swing.JLabel rtCodig;
    private javax.swing.JLabel rtCodigoOfi;
    private javax.swing.JLabel rtCpf;
    private javax.swing.JLabel rtCpf1;
    private javax.swing.JLabel rtCpfArm;
    private javax.swing.JLabel rtCpfCli;
    private javax.swing.JLabel rtEspalhamento;
    private javax.swing.JLabel rtMarca;
    private javax.swing.JLabel rtMecanismo;
    private javax.swing.JLabel rtMenuPrincipal;
    private javax.swing.JLabel rtModelo;
    private javax.swing.JLabel rtModoTiro;
    private javax.swing.JLabel rtNome;
    private javax.swing.JLabel rtNovoEnder;
    private javax.swing.JLabel rtNovoNome;
    private javax.swing.JLabel rtNum1;
    private javax.swing.JLabel rtNumero;
    private javax.swing.JLabel rtOfi;
    private javax.swing.JLabel rtRegistro;
    private javax.swing.JLabel rtRegistroAir;
    private javax.swing.JLabel rtRotulo;
    private javax.swing.JLabel rtRua;
    private javax.swing.JLabel rtRua1;
    private javax.swing.JLabel rtTipoGrip;
    private javax.swing.JTable tbConsultas;
    private javax.swing.JTable tbManutencs;
    // End of variables declaration//GEN-END:variables
}
